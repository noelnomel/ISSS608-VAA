---
title: "Hands-on Exercise 09 - Information Dashboard"
date: "10 March 2024"
date-modified: "last-modified"
format: html
execute: 
  echo: true # all code chunks will appear
  eval: true # all code chunks will run live
  warning: false # do not display warning message
  freeze: true # do not render if no changes made
  message: false
editor: visual
---

# 1. Overview

In the ninth lesson, we learn to create bullet charts and sparklines using `ggplot2` and dashboards using Shiny.

# 2. Getting Started

## 2.1. Installing and Loading Packages

The following new R packages are introduced in this lesson in addition to other packages that have been previously introduced:

1.  [`gtExtras`](https://jthomasmock.github.io/gtExtras/): to create beautiful tables with `gt`

2.  [`reactable``](https://glin.github.io/reactable/): to create interactive data tables on R 

3.  [`reactablefmtr`](https://kcuilla.github.io/reactablefmtr/): to streamline and enhance styling of interactive reactable tables

The packages to be used can be installed and loaded into the R environment using the `p_load()` function from the `pacman` package:

```{r}
pacman::p_load(tidyverse, ggthemes, lubridate, ggthemes,
               gt, gtExtras, reactable, reactablefmtr, RODBC)
```

## 2.2. Import Data

Next, we will use the Coffee Chain data set, which is a personal database in the Microsoft Access mdb format. We will use the RODBC package to import the database query table into R.

```{r}
#| eval: false
con <- odbcConnectAccess2007('data/Coffee Chain.mdb')
coffeechain <- sqlFetch(con, 'CoffeeChain Query')
write_rds(coffeechain, "data/CoffeeChain.rds")
odbcClose(con)
```

After writing the data into RDS format, we can read the file into R using `read_rds()`:

```{r}
coffeechain <- read_rds('data/rds/CoffeeChain.rds')
glimpse(coffeechain)
```
## 2.3. Data Preparation

Next, we create another table containing Sales and Budgeted Sales data aggregated at the Product level.
```{r}
product <- coffeechain %>%
  group_by(`Product`) %>%
  summarise(`target` = sum(`Budget Sales`),
            `current` = sum(`Sales`)) %>%
  ungroup()
```

# 3. Bullet Chart Using `ggplot2` 

We can use the following `ggplot2` functions to create a bullet chart:

```{r}
ggplot(product,
       aes(Product, current)) +
  geom_col(aes(Product, max(target) * 1.01),
           fill = "grey90", width = 0.85) +
  geom_col(aes(Product, target * 0.75),
           fill = "grey75", width = 0.85) +
  geom_col(aes(Product, target * 0.5),
           fill = "grey50", width = 0.85) +
  geom_col(aes(Product, current),
           fill = "black", width = 0.35) +
  geom_errorbar(aes(y= target, x = Product,
                    ymin = target, ymax = target),
                width = 0.4, colour = 'red', size = 1) +
  coord_flip()
  
```

# 4. Sparklines Using `ggplot2`

## 4.1. Preparing the Data

First, we create a table recording the total sales of products by month:
```{r}
sales_report <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  mutate(Month = month(Date)) %>%
  group_by(Month, Product) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup() %>%
  select(Month, Product, Sales)

sales_report
```

Next, we find the minimum, maximum, and the end-of-the-month sales:

```{r}
min <- group_by(sales_report, Product) %>%
  slice(which.min(Sales))

max <- group_by(sales_report, Product) %>%
  slice(which.max(Sales))

eom <- group_by(sales_report, Product) %>%
  filter(Month == max(Month))

```

Lastly, we compute the 25th and 75th quantiles:

```{r}
quant <- sales_report %>%
  group_by(Product) %>%
  summarise(quant1 = quantile(Sales, 0.25),
            quant2 = quantile(Sales, 0.75)) %>%
  right_join(sales_report)

```

## 4.2. Creating the Plot

Now, we use the following methods to create the sparklines plot using `ggplot2` methods:

```{r}
ggplot(sales_report, 
       aes(x=Month, y=Sales)) + 
  facet_grid(Product ~ ., 
             scales = "free_y") + 
  geom_ribbon(data = quant, 
              aes(ymin = quant1, max = quant2), 
              fill = 'grey90') +
  geom_line(size = 0.3) +
  geom_point(data = min, 
             col = 'red') +
  geom_point(data = max, 
             col = 'blue') +
  geom_text(data = min, 
            aes(label = Sales), 
            vjust = -1) +
  geom_text(data = max, 
            aes(label = Sales), 
            vjust = 2.5) +
  geom_text(data = eom, 
            aes(label = Sales), 
            hjust = 0, nudge_x = 0.5) +
  geom_text(data = eom, 
            aes(label = Product), 
            hjust = 0, nudge_x = 1.0) +
  expand_limits(x = max(sales_report$Month) + 
                  (0.25 * (max(sales_report$Month) - 
                             min(sales_report$Month)))) +
  scale_x_continuous(breaks = seq(1, 12, 1)) +
  scale_y_continuous(expand = c(0.1, 0)) +
  theme_tufte(base_size = 3, base_family = "Helvetica") +
  theme(axis.title = element_blank(), 
        axis.text.y = element_blank(), 
        axis.ticks = element_blank(), 
        strip.text = element_blank())
```

# 5. Static Information Dashboard Design Using `gt` and `gtExtras`

We will learn to create static information dashboards using [`gt`](https://gt.rstudio.com/) and [`gtExtras`](https://jthomasmock.github.io/gtExtras/).

## 5.1. Bullet Chart

```{r}
product %>%
  gt() %>%
  gt_plt_bullet(column = current,
                target = target,
                width = 60,
                palette = c("lightblue",
                            "black")) %>%
  gt_theme_538()
```

## 5.2. Sparklines

Before creating the chart, we have to prepare a sales report by product and month:

```{r}
report <- coffeechain %>%
  mutate(Year = year(Date)) %>%
  filter(Year == "2013") %>%
  mutate(Month = month(Date,
                       label = TRUE,
                       abbr = TRUE)) %>%
  group_by(Product, Month) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup()
```

One of the requirements of the `gtExtras` function is to use data.frame with list columns, which is achieved in the first 3 lines of code below:

```{r}
report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales),
            .groups = "drop") %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales',
                   same_limit = FALSE)
```

## 5.3. Plotting Sparklines with Statistics Table

First, we create new columns in the data.frame to calculate the summary statistics:

```{r}
report %>%
  group_by(Product) %>%
  summarise("Min" = min(Sales, na.rm = T),
            "Max" = max(Sales, na.rm = T),
            "Average" = mean(Sales, na.rm = T)) %>%
  gt() %>%
  fmt_number(columns = 4, decimals = 2)
```

Next, we combine the data.frame with list columns with the summary statistics:

```{r}
sales <- report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop")

summ <- report %>%
  group_by(Product) %>%
  summarise("Min" = min(Sales, na.rm = T),
            "Max" = max(Sales, na.rm = T),
            "Average" = mean(Sales, na.rm = T))

sales_data <- left_join(summ, sales)
```

Finally, we plot the sparkline chart with the data:

```{r}
sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales',
                   same_limit = FALSE)
```

## 5.4. Combining with Bullet Chart

We can add a bullet chart to the chart above. First, we create a summarised data.frame to be used in the bullet chart before merging it with `sales_data`.

```{r}
bullet <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  group_by(`Product`) %>%
  summarise(`Target` = sum(`Budget Sales`),
            `Actual` = sum(`Sales`)) %>%
  ungroup() 

sales_data = sales_data %>%
  left_join(bullet)
```

Next, we plot the graph:

```{r}
sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales') %>%
  gt_plt_bullet(column = Actual,
                target = Target,
                width = 28,
                palette = c("lightblue",
                            "black")) %>%
  gt_theme_538()
```

# 6. Interactive Information Dashboard Design Using `reactable` and `reactablefmtr`

We will now learn to create an interactive information dashboard using [`reactable`](https://glin.github.io/reactable/) and [`reactablefmtr`](https://kcuilla.github.io/reactablefmtr/).

## 6.1. Install and Load Required Package

Firstly, in order to build interactive sparklines, we have to install and load the dataui package:

```{r}
remotes::install_github("timelyportfolio/dataui")
library(dataui)
```

## 6.2. Plotting Interactive Sparklines

As with the use of `gtExtras` to plot sparklines, we have to create a data.frame with lsit field columns:

```{r}
sales <- report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales))
```

We are now ready to create the interactive plot:

```{r}
reactable(sales,
          columns = 
            list(Product = colDef(maxWidth = 200),
            `Monthly Sales` = colDef(cell = react_sparkline(sales))
            )
          )
```

We can observe that the plot is created across 2 pages. This is because the default page size is 10 rows. We can change this setting using this code:

```{r}
reactable(sales,
          defaultPageSize = 13,
          columns = 
            list(Product = colDef(maxWidth = 200),
            `Monthly Sales` = colDef(cell = react_sparkline(sales))
            )
          )
```

## 6.3. Add Points and Labels

We can use the `highlight_points` argument to add the minimum and maximum value points, and the `label` argument to label the first and last values.

```{r}
reactable(sales,
          defaultPageSize = 13,
          columns = 
            list(Product = colDef(maxWidth = 200),
            `Monthly Sales` = 
              colDef(cell = 
                       react_sparkline(sales,
                                       highlight_points =
                                         highlight_points(
                                           min = "red", max = "blue"),
                                       labels = c("first", "last"))))
            )
```

## 6.4. Add Reference Line

We can use `statline` to add a reference line. In this example, we use mean as the reference line.

```{r}
reactable(sales,
          defaultPageSize = 13,
          columns = 
            list(Product = colDef(maxWidth = 200),
            `Monthly Sales` = 
              colDef(cell = 
                       react_sparkline(sales,
                                       highlight_points =
                                         highlight_points(
                                           min = "red", max = "blue"),
                                       statline = "mean")))
            )
```

## 6.5. Add Bandline

We can use the `bandline` argument to add bandlines:

```{r}
reactable(sales,
          defaultPageSize = 13,
          columns = 
            list(Product = colDef(maxWidth = 200),
            `Monthly Sales` = 
              colDef(cell = 
                       react_sparkline(sales,
                                       highlight_points =
                                         highlight_points(
                                           min = "red", max = "blue"),
                                       line_width = 1,
                                       bandline = "innerquartiles",
                                       bandline_color = "green")))
            )
```

## 6.6. Changing Sparkline to Sparkbar

```{r}
reactable(sales,
          defaultPageSize = 13,
          columns = 
            list(Product = colDef(maxWidth = 200),
            `Monthly Sales` = 
              colDef(cell = 
                       react_sparkbar(sales,
                                      highlight_bars =
                                        highlight_bars(
                                          min = "red", max = "blue"),
                                      bandline = "innerquartiles",
                                      statline = "mean")))
            )
```

















