---
title: "Hands-on Exercise 08 - Modelling, Visualising, and Analysing Network Data"
date: "13 January 2024"
date-modified: "last-modified"
format: html
execute: 
  echo: true # all code chunks will appear
  eval: true # all code chunks will run live
  warning: false # do not display warning message
  freeze: true # do not render if no changes made
  message: false
editor: visual
---

# 1. Overview

In this eighth lesson, we learn to model, analyse, and visualise network data on R. Network visualisation is the process of visually presenting networks of connected entities as links and nodes.

# 2. Getting Started

## 2.1. Installing and Loading Packages

We will use the following R packages in addition to `tidyverse` and `lubridate` for this exercise:

1.  [`igraph`](https://igraph.org/): collection of network analysis tools

2.  [`tidygraph`](https://tidygraph.data-imaginist.com/): a tidy API for graph or network manipulation

3.  [`ggraph`](https://ggraph.data-imaginist.com/): `ggplot2` extension supporting relational data structures such as netowkrs, graphs, and trees.

4.  [`visNetwork`](https://datastorm-open.github.io/visNetwork/): R package for interactive network visualisation

The packages to be used can be installed and loaded into the R environment using the `p_load()` function from the `pacman` package:

```{r}
pacman::p_load(tidyverse, lubridate, clock,
               igraph, tidygraph, ggraph, visNetwork,
               graphlayouts)
```

## 2.2. Import Data

Next, we will read the data provided by the Course Instructor into the R environment. The datasets are from an oil exploration and extraction company, one set contains the nodes data while the second set contains the edges or link data. 

Both sets are in csv format, and We will use the `read_csv()` function from the `readr` package found in `tidyverse` to import both datasets into R.

```{r}
gas_nodes <- read_csv("data/GAStech_email_node.csv")
glimpse(gas_nodes)
```

Using `glimpse()` to view the data, we can see that the nodes dataset contains 54 records with 4 columns.

```{r}
gas_edges <- read_csv("data/GAStech_email_edge-v2.csv")
glimpse(gas_edges)
```

Using `glimpse` to view the data, it is observed that the edges dataset contains 9063 observations and 8 columns. However, we can also see that the "SentDate" field is treated as "chr" data type instead of "date". Hence, we have to change the data type. 

## 2.3. Data Preparation

### 2.3.1. Wrangling Time Data

We can use the `dmy()` function from the `lubdridate` package to convert the wrongly classified SentDate field into "date" format.
```{r}
gas_edges <- gas_edges %>%
  mutate(SentDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,
                        label = TRUE,
                        abbr = FALSE))

glimpse(gas_edges)
```

We can confirm that the data type of the SentDate field has been corrected.

### 2.3.2. Wrangling Attributes 

Examining the gas_edges dataframe, we can see that it contains individual email records. We will aggregate the data by date, source (sender), target (receiver), main subject, and day of the week.

```{r}
gas_edges_agg <- gas_edges %>%
  filter(MainSubject == "Work related") %>%
  group_by(source, target, Weekday) %>%
  summarise(Weight = n()) %>%
  filter(source != target) %>%
  filter(Weight > 1) %>%
  ungroup()

glimpse(gas_edges_agg)
```

# 3. Create Network Objects Using `tidygraph`

In this section, we learn to create a network graph data model using the `tidygraph` package. 

Two functions in the `tidygraph` package can be used to create network objects:
-   [`tbl_graph()`](https://tidygraph.data-imaginist.com/reference/tbl_graph.html) creates a `tbl_graph` network object from nodes and edges data
-   [`as_tbl_graph()`](https://tidygraph.data-imaginist.com/reference/tbl_graph.html) converts network data and objects to a `tbl_graph` network.

Furthermore, all `dplyr` verbs can be applied to `tbl_graph` objects. The `activate()` verb from `tidygraph` serves as a switch between tibbles for nodes and edges. 

## 3.1. Using `tbl_graph()` to Build `tidygraph` Data Model

```{r}
gas_graph <- tbl_graph(nodes = gas_nodes,
                       edges = gas_edges_agg,
                       directed = TRUE)

gas_graph
```

## 3.2. Changing the Active Object

The nodes tibble data frame is activated by default, and this can be changed by using the `activate()` function. 

```{r}
gas_graph %>%
  activate(edges) %>%
  arrange(desc(Weight))
```

# 4. Plotting Static Network Graphs with `ggraph`

## 4.1. Basic Network Graph

A network graph can be plotted using three functions: `ggraph()`, `geom_edge_link()`, and `geom_node_point()`.

```{r}
ggraph(gas_graph) +
  geom_edge_link() +
  geom_node_point()
```




























