---
title: "Hands-on Exercise 7 - Geospatial Data Point"
date: "21 February 2024"
date-modified: "last-modified"
format: html
execute: 
  echo: true # all code chunks will appear
  eval: true # all code chunks will run live
  warning: false # do not display warning message
  freeze: true # do not render if no changes made
  message: false
editor: visual
---

# 1. Overview

In the second part of the seventh lesson, we learn to create proportional symbol maps that use visusal variable of size to represent differences in the magnitude of a discrete, abruptly changing phenomenon. This can be done using the [`tmap`](https://cran.r-project.org/web/packages/tmap/) package.

# 2. Getting Started

## 2.1. Installing and Loading Packages

We will use the following R packages in addition to `tidyverse` for this exercise:

1.  [`tmap`](https://cran.r-project.org/web/packages/tmap/): to create choropleth maps

2.  [`sf`](https://cran.r-project.org/web/packages/sf/): to handle geospatial data

The packages to be used can be installed and loaded into the R environment using the `p_load()` function from the `pacman` package:

```{r}
pacman::p_load(tidyverse, tmap, sf)
```

## 2.2. The Data

We will use a dataset showing number of wins by each Singapore Pools outlet prepared by the Course Instructor. The data is in csv format, and it contains the x- and y-coordinates (in [SVY21, Singapore's Projected Coordinate System](https://app.sla.gov.sg/sirent/About/PlaneCoordinateSystem)) of each Singapore Pools outlet.

### 2.2.1. Import Data

We will read the asaptial data into the R environment using the `read_csv()` function from the `readr` package found in `tidyverse`.

```{r}
sgpools <- read_csv("data/aspatial/SGPools_svy21.csv")
list(sgpools)
```

We can observe from above that the data contains 306 records with 7 features, and that the data frame is imported to R as a tibble data frame. 

## 2.3. Data Preparation

To plot the data as a map, we need to convert the tibble dataframe into a simple feature dataframe using the coordinates provided. We can do this by using the `st_as_sf()` function from the `sf` package:

```{r}
sgpools_sf <- st_as_sf(sgpools,
                       coords = c("XCOORD", "YCOORD"),
                       crs = 3414)

list(sgpools_sf)
```

It is observed that the dataframe is now converted to a sf dataframe, and a new 'geometry' column has been added.

::: callout-note
-   The `coords` argument requires the column names where the x-coordinates and y-coordinates can be found.
-   The `crs` argument requires an input of the coordinates system in the [EPSG](https://www.earthdatascience.org/courses/use-data-open-source-python/intro-vector-data-python/spatial-data-vector-shapefiles/epsg-proj4-coordinate-reference-system-formats-python/) format. EPSG:3414 refers to Singapore's SVY21 Projected Coordinate System.
:::

# 3. Creating Proportional Symbol Maps

The `view` mode of tmap will be used to create an interactive proportional symbol map. We can turn on the `view` mode using the following code:

```{r}
tmap_mode("view")
```

## 3.1. Create An Interactive Point Symbol Map

First, we create an interactive point symbol map:

```{r}
tm_shape(sgpools_sf) +
  tm_bubbles(col = "red",
             size = 1,
             border.col = "black",
             border.lwd = 1)
```

## 3.2. Adjusting `size` According to Variable

Next, we can assign a numerical variable to the `size` argument to draw a proportional symbol map:

```{r}
tm_shape(sgpools_sf) +
  tm_bubbles(col = "red",
             size = "Gp1Gp2 Winnings",
             border.col = "black",
             border.lwd = 1)
```

## 3.3. Using Colours to Differentiate

We can provide additional information to the map by changing the `col` argument to take in a variable as well:

```{r}
tm_shape(sgpools_sf) +
  tm_bubbles(col = "OUTLET TYPE",
             size = "Gp1Gp2 Winnings",
             border.col = "black",
             border.lwd = 1)
```

## 3.4. Creating Faceted Plots

We can use the `tm_facets()` function to create faceted plots with synchronised selection, zoom and pan settings.

```{r}
tm_shape(sgpools_sf) +
  tm_bubbles(col = "OUTLET TYPE", 
          size = "Gp1Gp2 Winnings",
          border.col = "black",
          border.lwd = 1) +
  tm_facets(by= "OUTLET TYPE",
            nrow = 1,
            sync = TRUE)
```
















