---
title: "Hands-on Exercise 07 - Choropleth Mapping"
date: "21 February 2024"
date-modified: "last-modified"
format: html
execute: 
  echo: true # all code chunks will appear
  eval: true # all code chunks will run live
  warning: false # do not display warning message
editor: visual
---

# 1. Overview

In the first part of the seventh lesson, we learn to create choropleth maps to visualise spaital distributions of data. This will be done using the [`tmap`](https://cran.r-project.org/web/packages/tmap/) package.

# 2. Getting Started

## 2.1. Installing and Loading Packages

We will use the following R packages in addition to `tidyverse` for this exercise:

1.  [`tmap`](https://cran.r-project.org/web/packages/tmap/): to create choropleth maps

2.  [`sf`](https://cran.r-project.org/web/packages/sf/): to handle geospatial data

The packages to be used can be installed and loaded into the R environment using the `p_load()` function from the `pacman` package:

```{r}
pacman::p_load(tidyverse, tmap, sf)
```

## 2.2. The Data

We will use the following data sets for this exercise:

| Data                                                                                                | Format         | Source                                                                                                                          | Description                                                                                  |
|-----------------------------------------------------------------------------------------------------|----------------|---------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------|
| Master Plan 2014 Subzone Boundary (Web)                                                             | ESRI shapefile | [data.gov.sg](https://beta.data.gov.sg/collections?query=Master%20Plan%202014%20Subzone%20Boundary%20(Web)&sort=Last%20updated) | Geospatial data containing geographical boundary of Singapore at the planning subzone level. |
| Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 | CSV            | [singstat.gov.sg](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data)         | Aspatial data containing demographics by Planning Area (PA) and Subzone (SZ).                |
### 2.2.1. Import Geospatial Data
We will read the geospatial data into the R environment using the `st_read()` function from the `sf` package. We will import the `MP14_SUBZONE_WEB_PL` shapefile into into R as a simple feature data frame.

```{r}
mpsz <- st_read(dsn = "data/geospatial", 
                layer = "MP14_SUBZONE_WEB_PL")

mpsz
```

Looking at the data, it is observed that the simple feature data frame contains 323 features and 15 fields. The data frame contains multipolygons and it is projected using SVY21, Singapore's coordinate system.

### 2.3.2. Import Aspatial Data

Lastly, we will read the aspatial data into the R environment using the `read_csv()` function from the `readr` package found in `tidyverse`.

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
glimpse(popdata)
```

Using `glimpse` to view the data, it is observed that the data contains 984,656 records with 7 columns including the Planning Area, Subzone (SZ), and Age Group (AG).

## 2.3. Data Preparation

We will first prepare a data table with values from year 2020 containing the variables PA, SZ, YOUNG, ECONOMICALLY ACTIVE, AGED, TOTAL, DEPENDENCY based on the following definitions:

-   YOUNG: AG 0_to_4 to AG 20_to_24
-   ECONOMICALLY ACTIVE: AG 25_to_29 to AG 60_to_64
-   AGED: AG 65_to_69 to AG 90_and_over
-   TOTAL: Sum of population of all age groups
-   DEPENDENCY: Ratio between YOUNG and AGED against ECONOMICALLY ACTIVE

### 2.3.1. Data Wrangling

We will create the desired data frame using the following code:

```{r}
#| eval: false
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup() %>%
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>% 
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+ 
           rowSums(.[13:15])) %>%
  mutate(`AGED`=rowSums(.[16:21])) %>% 
  mutate(`TOTAL`=rowSums(.[3:21])) %>%  
  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
         /`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
         `ECONOMY ACTIVE`, `AGED`, 
         `TOTAL`, `DEPENDENCY`) %>%
  mutate_at(.vars = vars(PA, SZ), 
            .funs = funs(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)
```

### 2.3.2. Joining Geospatial and Aspatial Data

We will use the `left_join()` function from the `dplyr` package to merge the aspatial data to the geospatial data. This ensures that the simple feature data frame is retained. 

```{r}
#| eval: false
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

To save this merged data frame for future use, we can use `write_rds()` function from the `readr` package to create a RDS file locally.

```{r}
#| eval: false
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

The RDS file can be imported into R using the `read_rds()` function from the `readr` package:

```{r}
mpsz_pop2020 <- read_rds("data/rds/mpszpop2020.rds")
```

# 3. Choropleth Mapping Using `tmap`

## 3.1. Quick Map Using `qtm()`

When a quick visualisation is required, we can use `qtm()` to create a concise and default visualisation.

```{r}
tmap_mode("plot")
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

## 3.2. Using `tmap` Elements

Using the elements of `tmap`, we are able to customise and adjust the aesthetics of individual layers. 

::: panel-tabset
#### Base Map

The basic building block of `tmap` is `tm_shape()` and `tm_polygons()`. `tm_shape()` is used to define the input data, and `tm_polygons()` is used to draw the polygons.

```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

#### `tm_fill()` and `tm_border()`
`tm_fill()` is used to shade the polygons by using the default colour scheme while `tm_border()` adds borders of the shapefule onto the map.

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

The subzones are shaded according to the dependency ratio. We can add borders using the following code:

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") + 
  tm_borders(lwd = 0.1, alpha = 1)
```

#### `tm_polygons()`

`tm_polygons()` is a wrapper of `tm_fill()` and `tm_border()` by fulfilling the both functions in one. We can use geographical distribution of a selected variable by using `tm_polygons()`.

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

:::

## 3.3. Data Classification Methods

`tmap` provides ten data classification methods to group a large number of observations into data ranges or classes: `fixed`, `sd`, `equal`, `pretty` (default), `quantile`, `kmeans`, `hclust`, `bclust`, `fisher`, and `jenks.`

::: panel-tabset
#### `sd`
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "sd") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 10,
          style = "sd") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 2,
          style = "sd") +
  tm_borders(alpha = 0.5)
```
#### `equal`

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5)
```

#### `pretty`

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "pretty") +
  tm_borders(alpha = 0.5)
```

#### `quantile`
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5)
```


#### `kmeans`
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "kmeans") +
  tm_borders(alpha = 0.5)
```

#### `hclust`
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "hclust") +
  tm_borders(alpha = 0.5)
```

#### `bclust`
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "bclust") +
  tm_borders(alpha = 0.5)
```

#### `fisher`
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "fisher") +
  tm_borders(alpha = 0.5)
```

#### `jenks`

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "jenks") +
  tm_borders(alpha = 0.5)
```

:::





























