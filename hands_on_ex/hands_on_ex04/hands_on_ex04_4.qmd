---
title: "Hands-on Exercise 4 - Funnel Plots"
date: "29 January 2024"
date-modified: "last-modified"
format: html
execute: 
  echo: true # all code chunks will appear
  eval: true # all code chunks will run live
  warning: false # do not display warning message
editor: "visual"
---

# 1. Overview

In the fourth part of the fourth lesson, we explore the use of funnel plots. A funnel plot is specially designed to conduct unbiased comparison between outlets, stores, or business entities.

# 2. Getting Started

## 2.1. Loading Required Library

We will use `FunnelPlotR` in this exercise in addition to `tidyverse`, `ggplot2`, `knitr`, and `plotly`:

1.  [`FunnelPlotR`](https://rdrr.io/cran/FunnelPlotR/man/funnel_plot): to create funnel plots

```{r}
pacman::p_load(tidyverse, ggplot2, knitr, 
               plotly, FunnelPlotR)
```

## 2.2. Import Data

Next, we will read the data provided by the Course Instructor into the R environment. For this exercise, we will use the COVID-19_DKI_Jakarta downloaded from the [`Open Data COVID-19 Provinski DKI Jakarta Portal`](https://riwayat-file-covid-19-dki-jakarta-jakartagis.hub.arcgis.com). The data is in CSV format and we will load the data into the R environment using the `read_csv()` function from the `readr` package found in `tidyverse`.

```{r}
covid19 <- read_csv("data/COVID-19_DKI_Jakarta.csv") %>%
  mutate_if(is.character, as.factor)

glimpse(covid19)
```

Using `glimpse`, it is observed that the data contains the status on COVID-19 patients by the sub-districts in Indonesia.

# 3. `FunnelPlotR` Methods

The `FunnelPlotR` package uses ggplot to generate funnel plots. It requires a `numerator` (events of interest), a `denominator` (population to be considered), and `group`. The key arguments for customisation are:

-   `limit`: plot limits (95 or 99)

-   `label_outliers`: to label outliers (TRUE or FALSE)

-   `Poisson_limits`: to add Poisson limits to the plot

-   `OD_adjust`: to add **o**ver**d**ispersed limits to the plot

-   `xrange` and `yrange`: to specify the range to display for the axes, acts like a zoom function

::: panel-tabset
#### Basic Plot

We use the the following code to plot a funnel plot.

```{r}
funnel_plot(
  numerator = covid19$Death,
  denominator = covid19$Positive,
  group = covid19$`Sub-district`
)
```

::: callout-note
-   The `group` function defines the level of points to be plotted. Options from this case include Sub-district, District or City.

-   By default, `data_type = "SR"`, indirectly standardised ratios

-   Plot limits can be adjusted using the `limit` argument, where 95 or 99 are accepted as the 95% ot 99.8% quantiles of the distribution.
:::

#### Using `data_type`, `xrange`, `yrange`

We use the `ggcoefstats()` function from the `ggstatsplot` package to visualise the parameters of the regression model.

```{r}
funnel_plot(
  numerator = covid19$Death,
  denominator = covid19$Positive,
  group = covid19$`Sub-district`,
  data_type = "PR", 
  x_range = c(0,6500), 
  y_range = c(0, 0.05) 
)
```

::: callout-note
-   The `data_type` argument is used to change the default to "PR" for proportions.

-   `xrange` and `yrange` are used to set the range of the x- and y-axes.
:::

#### Using `label`, `title`, `x_label`, `y_label`

```{r}
funnel_plot(
  numerator = covid19$Death,
  denominator = covid19$Positive,
  group = covid19$`Sub-district`,
  data_type = "PR", 
  x_range = c(0,6500), 
  y_range = c(0, 0.05),
  label = NA,
  title = "Cumulative COVID-19 Fatality Rate by Cumulative Total COVID-19 Positive",
  x_label = "Cumulative COVID-19 Positive Cases",
  y_label = "Cumulative COVID-19 Fatality Rate"
)
```

::: callout-note
-   `label = NA` argument is used to remove default `label_outliers` feature.

-   `title` argument is used to add a title to the plot

-   `x_label` and `y_label` are used to add labels to the x- and y-axes.
:::
:::

# 4. `ggplot2` Methods

We will now explore `ggplot2` methods to build funnel plots.

## 4.1. Compute Basic Derived Fields

In this method, we have to first derive the cumulative death rate and standard error of cumulative death rate.

```{r}
df <- covid19 %>%
  mutate(rate = Death / Positive) %>%
  mutate(rate.se = sqrt((rate*(1 - rate)) / (Positive))) %>%
  filter(rate > 0)
```

Next, we compute fit.mean using `weighted_mean()`.

```{r}
fit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)
```

## 4.2. Calculate Lower and Upper Limits for 95% and 99% CI

Next, we use the following code to compute the lower and upper limits for 95% confidence interval.

```{r}
number.seq <- seq(1, max(df$Positive), 1)
number.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
dfCI <- data.frame(number.ll95, number.ul95, number.ll999, 
                   number.ul999, number.seq, fit.mean)
```

## 4.3. Plotting A Static Funnel Plot

Next, we use `ggplot2` functions to plot a static funnel plot.

```{r}
#| code-fold: true
#| code-summary: "Codes here"

p <- ggplot(data = df, 
            aes(x = Positive, 
                y = rate)) +
  geom_point(aes(label = `Sub-district`), 
             alpha=0.4) +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll999), 
            size = 0.4, 
            colour = "grey40") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul999), 
            size = 0.4, 
            colour = "grey40") +
  geom_hline(data = dfCI, 
             aes(yintercept = fit.mean), 
             size = 0.4, 
             colour = "grey40") +
  coord_cartesian(ylim=c(0, 0.05)) +
  annotate("text", x = 1, y = -0.13, label = "95%", size = 3, colour = "grey40") + 
  annotate("text", x = 4.5, y = -0.18, label = "99%", size = 3, colour = "grey40") + 
  ggtitle("Cumulative Fatality Rate by Cumulative COVID-19 Cases") +
  xlab("Cumulative COVID-19 Cases") + 
  ylab("Cumulative Fatality Rate") +
  theme_classic() +
  theme(plot.title = element_text(size = 12),
        legend.position = c(0.91, 0.85), 
        legend.title = element_text(size = 7),
        legend.text = element_text(size = 7),
        legend.background = element_rect(colour = "grey60", linetype = "dotted"),
        legend.key.height = unit(0.3, "cm"))
p
```

## 4.4. Plotting An Interactive Funnel Plot

We use the `ggplotly()` function from the `plotly` package to create an interactive funnel plot.

```{r}
fp_interact <- ggplotly(p,
                        tooltip = c("label", 
                                    "x",
                                    "y"))

fp_interact
```
