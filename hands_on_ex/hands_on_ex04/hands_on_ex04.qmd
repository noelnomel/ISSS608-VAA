---
title: "Hands-on Exercise 04 - Visualising Distributions"
date: "29 January 2024"
date-modified: "last-modified"
format: html
execute: 
  echo: true # all code chunks will appear
  eval: true # all code chunks will run live
  warning: false # do not display warning message
editor: "visual"
---

# 1. Overview

In the first part of the fourth lesson, we learn to visualise distributions using ridgeline and raincloud plots by using `ggplot2` and its extensions.

# 2. Getting Started

## 2.1. Installing and Loading Packages

We will use the following R packages in addition to `tidyverse` and `ggthemes` for this exercise:

1.  [`ggdist`](https://mjskay.github.io/ggdist): `ggplot2` extension designed for visualising distributions and uncertainty

2.  [`ggridges`](https://wilkelab.org/ggridges): to create partially overlapping line plots to visualise changes in distribution over time or space

3.  [`colorspace`](https://cran.r-project.org/web/packages/colorspace/vignettes/colorspace): toolbox for manipulating colours and palettes

The packages to be used can be installed and loaded into the R environment using the `p_load()` function from the `pacman` package:

```{r}
pacman::p_load(tidyverse, ggthemes, 
               ggdist, ggridges, colorspace)
```

## 2.2. Import Data

Next, we will read the data provided by the Course Instructor into the R environment. We will use the `read_csv()` function from the `readr` package found in `tidyverse`.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
glimpse(exam_data)
```

Using `glimpse` to view the data, it is observed that the data contains the examination grades of a batch of primary 3 students for the subjects English, Maths, and Science.

# 3. Ridgeline Plot

A ridgeline plot is a visualisation technique that reveals the distribution of a numeric value for several groups or over different time periods.

Ridgeline plots are useful when there are more than five groups to be represented on the plot. This is because space is used more efficiently in a ridgeline plot due to the overlaps. Ridgeline plots also work well when there are clear patterns in the results, such as obvious rankings across groups.

We can use the `ggridges` package to plot ridgeline plots. In this package, we use `geom_ridgeline()` to draw the ridgelines and `geom_density_ridges()` to draw the estimated data densities using ridgelines.

::: panel-tabset
#### `geom_density_ridges()`

```{r}
#| code-fold: true
#| code-summary: "Codes here"

ggplot(data = exam_data,
       aes(x = ENGLISH,
           y = CLASS)) +
  geom_density_ridges(
    scale = 3,
    rel_min_height = 0.01,
    bandwidth = 3.4,
    fill = lighten('#7097BB', 0.3),
    color = "white"
  ) +
  scale_x_continuous(
    name = "English Grades",
    expand = c(0,0)) +
  scale_y_discrete(name = NULL,
                   expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges() +
  ggtitle("Distribution of English Grades by Class")
```

#### Varying Fill Colours

We can use the `geom_ridgeline_gradient()` or the `geom_density_ridges_gradient()` functions that allow for varying fill colours.

```{r}
#| code-fold: true
#| code-summary: "Codes here"

ggplot(data = exam_data,
       aes(x = ENGLISH,
           y = CLASS,
           fill = stat(x))) +
  geom_density_ridges_gradient(
    scale = 3,
    rel_min_height = 0.01) +
  scale_fill_viridis_c(name = "Temp. [F]",
                        option = "C") +
  scale_x_continuous(
    name = "English Grades",
    expand = c(0,0)) +
  scale_y_discrete(name = NULL,
                   expand = expansion(add = c(0.2, 2.6))) +
  theme_ridges() +
  ggtitle("Distribution of English Grades by Class (Varying Fill)")
```

#### Mapping Probabilities

We can use the `stat_density_ridges()` function to map probabilities onto the ridgeline plot. In the example below, we use `stat(ecdf)` to map the empirical cumulative density function for the distribution of English grades.

```{r}
#| code-fold: true
#| code-summary: "Codes here"

ggplot(data = exam_data,
       aes(x = ENGLISH,
           y = CLASS,
           fill = 0.5 - abs(0.5-stat(ecdf)))) +
  stat_density_ridges(geom = "density_ridges_gradient",
                      calc_ecdf = TRUE) +
  scale_fill_viridis_c(name = "Tail Probability",
                       direction = -1) +
  theme_ridges() +
  ggtitle("Distribution of English Grades by Class (Probability)")
```

#### Mapping Quantile Lines

We can fill a ridgeline plot by quantile using `geom_density_ridges_gradient()` and the calculated `stat(quantile)`:

```{r}
#| code-fold: true
#| code-summary: "Codes here"

ggplot(exam_data,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile)))) +
  stat_density_ridges(geom = "density_ridges_gradient",
                      calc_ecdf = TRUE, 
                      quantiles = 4, 
                      quantile_lines = TRUE) +
  scale_fill_viridis_d(name = "Quartiles") +
  theme_ridges() +
  ggtitle("Distribution of English Grades by Class (Quantile)")
```

#### Mapping Specified Quantile Cut-Points

Instead of using a defined number of quantiles, we can specify the quantiles using cut points. In this example, we specify the quantile cut points to be 2.5% and 07.5% tails:

```{r}
#| code-fold: true
#| code-summary: "Codes here"

ggplot(exam_data,
       aes(x = ENGLISH, 
           y = CLASS, 
           fill = factor(stat(quantile)))) +
  stat_density_ridges(geom = "density_ridges_gradient",
                      calc_ecdf = TRUE, 
                      quantiles = c(0.025, 0.975), 
                      quantile_lines = TRUE) +
  scale_fill_manual(name = "Probability",
                    values = c("#FF0000A0", "#A0A0A0A0", "#0000FFA0"),
                    labels = c("(0, 0.025]", "(0.025, 0.975]", "(0.975, 1]")) +
  theme_ridges() +
  ggtitle("Distribution of English Grades by Class (Quantile)")
```
:::

# 4. Raincloud Plot

Raincloud Plot is a data visualisation technique that combines a half-density plot and a half-dotplot. The half-density plot forms the "raincloud" while the half-dotplot forms the "raindrops". This visualisation technique highlights where densities are clustered, thus enhancing the traditional boxplot.

## 4.1. Plotting a Half Eye Graph

The first step to creating a raincloud plot is to create a half eye plot. This can be done using the `stat_halfeye()` function from the `ggdist` package. In this example, we plot English grades against Race.

```{r}
ggplot(data = exam_data,
       aes(x = RACE,
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_color = NA) +
  ggtitle("Half Eye Plot Is The First Step")
```

## 4.2. Adding a Boxplot

Next, we add a boxplot to the half eye plot using `geom_boxplot()`.

```{r}
ggplot(data = exam_data,
       aes(x = RACE,
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_color = NA) +
  geom_boxplot(width = 0.1,
               outlier.shape = NA) +
  ggtitle("Next We Add A Boxplot")
```

## 4.3. Adding a Half-Dotplot

The third step requires use to add in the "raindrops" in the form of a dotplot. This can be done using the `stat_dots()` function of the `ggdist` package. This creates a half-dotplot:

```{r}
ggplot(data = exam_data,
       aes(x = RACE,
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_color = NA) +
  geom_boxplot(width = 0.1,
               outlier.shape = NA) +
  stat_dots(side = "left",
            justification = 1.2,
            binwidth = 0.5,
            dotsize = 2) +
  ggtitle("Thirdly, We Add A Dotplot")
```

## 4.4. Let It Rain (Insights)

Lastly, we use the `coord_flip()` function to rotate the chart to complete the raincloud appearance.

```{r}
ggplot(data = exam_data,
       aes(x = RACE,
           y = ENGLISH)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_color = NA) +
  geom_boxplot(width = 0.1,
               outlier.shape = NA) +
  stat_dots(side = "left",
            justification = 1.2,
            binwidth = 0.5,
            dotsize = 2) +
  coord_flip() +
  theme_classic() +
  ggtitle("Raincloud Plot")
```
