{
  "hash": "5fa3e1adda52717385385e5eb4ead927",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 07 - Choropleth Mapping\"\ndate: \"21 February 2024\"\ndate-modified: \"last-modified\"\nformat: html\nexecute: \n  echo: true # all code chunks will appear\n  eval: true # all code chunks will run live\n  warning: false # do not display warning message\n  freeze: true # do not render if no changes made\n  message: false\neditor: visual\n---\n\n\n# 1. Overview\n\nIn the first part of the seventh lesson, we learn to create choropleth maps to visualise spaital distributions of data. This will be done using the [`tmap`](https://cran.r-project.org/web/packages/tmap/) package.\n\n# 2. Getting Started\n\n## 2.1. Installing and Loading Packages\n\nWe will use the following R packages in addition to `tidyverse` for this exercise:\n\n1.  [`tmap`](https://cran.r-project.org/web/packages/tmap/): to create choropleth maps\n\n2.  [`sf`](https://cran.r-project.org/web/packages/sf/): to handle geospatial data\n\nThe packages to be used can be installed and loaded into the R environment using the `p_load()` function from the `pacman` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, tmap, sf)\n```\n:::\n\n\n## 2.2. The Data\n\nWe will use the following data sets for this exercise:\n\n| Data                                                                                                | Format         | Source                                                                                                                          | Description                                                                                  |\n|----------------------|------------|-------------|--------------------------|\n| Master Plan 2014 Subzone Boundary (Web)                                                             | ESRI shapefile | [data.gov.sg](https://beta.data.gov.sg/collections?query=Master%20Plan%202014%20Subzone%20Boundary%20(Web)&sort=Last%20updated) | Geospatial data containing geographical boundary of Singapore at the planning subzone level. |\n| Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 | CSV            | [singstat.gov.sg](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data)         | Aspatial data containing demographics by Planning Area (PA) and Subzone (SZ).                |\n\n### 2.2.1. Import Geospatial Data\n\nWe will read the geospatial data into the R environment using the `st_read()` function from the `sf` package. We will import the `MP14_SUBZONE_WEB_PL` shapefile into into R as a simple feature data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\noelnomel\\ISSS608-VAA\\hands_on_ex\\hands_on_ex07\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n:::\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n:::\n:::\n\n\nLooking at the data, it is observed that the simple feature data frame contains 323 features and 15 fields. The data frame contains multipolygons and it is projected using SVY21, Singapore's coordinate system.\n\n### 2.2.2. Import Aspatial Data\n\nLastly, we will read the aspatial data into the R environment using the `read_csv()` function from the `readr` package found in `tidyverse`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata <- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\nglimpse(popdata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 984,656\nColumns: 7\n$ PA   <chr> \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   <chr> \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ AG   <chr> \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to…\n$ Sex  <chr> \"Males\", \"Males\", \"Males\", \"Males\", \"Males\", \"Males\", \"Males\", \"M…\n$ TOD  <chr> \"HDB 1- and 2-Room Flats\", \"HDB 3-Room Flats\", \"HDB 4-Room Flats\"…\n$ Pop  <dbl> 0, 10, 30, 50, 0, 0, 40, 0, 0, 10, 30, 60, 0, 0, 40, 0, 0, 10, 30…\n$ Time <dbl> 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011,…\n```\n:::\n:::\n\n\nUsing `glimpse` to view the data, it is observed that the data contains 984,656 records with 7 columns including the Planning Area, Subzone (SZ), and Age Group (AG).\n\n## 2.3. Data Preparation\n\nWe will first prepare a data table with values from year 2020 containing the variables PA, SZ, YOUNG, ECONOMICALLY ACTIVE, AGED, TOTAL, DEPENDENCY based on the following definitions:\n\n-   YOUNG: AG 0_to_4 to AG 20_to_24\n-   ECONOMICALLY ACTIVE: AG 25_to_29 to AG 60_to_64\n-   AGED: AG 65_to_69 to AG 90_and_over\n-   TOTAL: Sum of population of all age groups\n-   DEPENDENCY: Ratio of YOUNG and AGED to ECONOMICALLY ACTIVE\n\n### 2.3.1. Data Wrangling\n\nWe will create the desired data frame using the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup() %>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>% \n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+ \n           rowSums(.[13:15])) %>%\n  mutate(`AGED`=rowSums(.[16:21])) %>% \n  mutate(`TOTAL`=rowSums(.[3:21])) %>%  \n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n         /`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n         `ECONOMY ACTIVE`, `AGED`, \n         `TOTAL`, `DEPENDENCY`) %>%\n  mutate_at(.vars = vars(PA, SZ), \n            .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n\n### 2.3.2. Joining Geospatial and Aspatial Data\n\nWe will use the `left_join()` function from the `dplyr` package to merge the aspatial data to the geospatial data. This ensures that the simple feature data frame is retained.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\nTo save this merged data frame for future use, we can use `write_rds()` function from the `readr` package to create a RDS file locally.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n```\n:::\n\n\nThe RDS file can be imported into R using the `read_rds()` function from the `readr` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_pop2020 <- read_rds(\"data/rds/mpszpop2020.rds\")\n```\n:::\n\n\n# 3. Choropleth Mapping Using `tmap`\n\n## 3.1. Quick Map Using `qtm()`\n\nWhen a quick visualisation is required, we can use `qtm()` to create a concise and default visualisation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## 3.2. Using `tmap` Elements\n\nUsing the elements of `tmap`, we are able to customise and adjust the aesthetics of individual layers.\n\n::: panel-tabset\n#### Base Map\n\nThe basic building block of `tmap` is `tm_shape()` and `tm_polygons()`. `tm_shape()` is used to define the input data, and `tm_polygons()` is used to draw the polygons.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n#### `tm_fill()` and `tm_border()`\n\n`tm_fill()` is used to shade the polygons by using the default colour scheme while `tm_border()` adds borders of the shapefule onto the map.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nThe subzones are shaded according to the dependency ratio. We can add borders using the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") + \n  tm_borders(lwd = 0.1, alpha = 1)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n#### `tm_polygons()`\n\n`tm_polygons()` is a wrapper of `tm_fill()` and `tm_border()` by fulfilling the both functions in one. We can use geographical distribution of a selected variable by using `tm_polygons()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n:::\n\n## 3.3. Data Classification Methods\n\n`tmap` provides ten data classification methods to group a large number of observations into data ranges or classes: `fixed`, `sd`, `equal`, `pretty` (default), `quantile`, `kmeans`, `hclust`, `bclust`, `fisher`, and `jenks.`\n\n::: panel-tabset\n#### `sd`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\nUsing different number of classes narrows the range of each bin and increases the range of colours used to represent each bin.\n:::\n\n#### `equal`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n#### `pretty`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"pretty\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n#### `quantile`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n#### `kmeans`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n#### `hclust`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"hclust\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n#### `bclust`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"bclust\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nCommittee Member: 1(1) 2(1) 3(1) 4(1) 5(1) 6(1) 7(1) 8(1) 9(1) 10(1)\nComputing Hierarchical Clustering\n```\n:::\n:::\n\n\n#### `fisher`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"fisher\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n#### `jenks`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n:::\n\n## 3.4. Using Custom Break Points\n\nIt is possible to override the default breaks computerd by the built-in styles (as seen above) by using the `breaks` argument in `tm_fill()`.\n\n::: callout-important\nIn order to have n categories, n+1 elements must be specified in the `breaks` argument as the breaks include a minimum and maximum.\n\nValues must also be specified in ascending order.\n:::\n\nFirst, we will view the descriptive statistics of the variable before deciding on the break points.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(mpsz_pop2020$DEPENDENCY)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n```\n:::\n:::\n\n\nUsing the results, we can choose to set the break points to be at 0.60, 0.70, 0.80, and 0.90, excluding the minimum of 0 and maximum of 1.00.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n# 4. `RColorBrewer` with `tmap`\n\n`tmap` supports colour ramps defined by the user or predefined colour ramps from the `RColorBrewer` package.\n\nThe colour can be changed using the `palette` argument in `tm_fill()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nWe can reverse the order of the colour shades by adding a \"-\" prefix:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n# 5. Map Layouts\n\nMap layouts refer to the combination of all map elements to create a cohesive map. Some map elements include the objects to be mapped, map title, legend, scale bar, and aspect ratios.\n\n::: panel-tabset\n#### `tm_layout` and `legend`\n\nThere are several options provided by `tmap` to customise the map elements such as legend and title.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n#### `tmap_style`\n\n`tmap_style()` can be used to change the style of the map based on some prefixed look and feel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nThe default style is \"white\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_style(\"white\")\n```\n:::\n\n\n#### Cartographic Furniture\n\nAdditional features such as compass, scale bar, and grid lines can be added to the map using `tm_compass()`, `tm_scale_bar()`, and `tm_grid()` respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n:::\n\n# 6. Drawing Small Multiple Choropleth Maps\n\nFacet maps are composed of multiple maps arranged in a grid (adjacent or stacked). This allows for the visualisation of changes in spatial relationships in response to another variable such as time.\n\nSmall multiples, or facet maps, can be plotted in three ways:\n\n::: panel-tabset\n#### 1. Assigning Multiple Values to One Aesthetic Argument\n\nSmall multiple maps can be created by defining `ncols` in `tm_fill()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill(c(\"YOUNG\", 'AGED'),\n          style = 'equal',\n          palette = 'Blues') +\n  tm_layout(legend.position = c('right','bottom')) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\nSmall multiple maps can also be created by assigning multiple values to at least one of the aesthetic arguments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill(c(\"DEPENDENCY\", 'AGED'),\n          style = c('equal','quantile'),\n          palette = list('Blues', 'Greens')) +\n  tm_layout(legend.position = c('right','bottom')) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n#### 2. Defining Group-by Variable in `tm_facets()`\n\nSmall multiple choropleth maps can be created using `tm_facets()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = 'quantile',\n          palette = 'Blues',\n          thres.poly = 0) +\n  tm_facets(by = 'REGION_N',\n            free.coords = TRUE,\n            drop.shapes = TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"),\n            title.size = 20)+\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n#### 3. Creating Multiple Standalone Maps with `tmap_arrange()`\n\nSmall multiple choropleth maps can be created using `tm_arrange()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoungmap <- tm_shape(mpsz_pop2020) +\n  tm_polygons(\"YOUNG\",\n              style = \"quantile\",\n              palette = \"Blues\")\n\nagedmap <- tm_shape(mpsz_pop2020) +\n  tm_polygons(\"AGED\",\n              style = 'quantile',\n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp = 1, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n:::\n\n# 7. Using Selection Criterion to Map Spatial Object\n\nThe selection function can be used to map spatial objects that meet a specified criterion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N == 'CENTRAL REGION',]) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          legend.hist = TRUE,\n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45,\n            legend.width = 5.0,\n            legend.position = c(\"right\",\"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands_on_ex07_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "hands_on_ex07_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}