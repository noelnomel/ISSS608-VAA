{
  "hash": "2e249da05a9528615441e67222a16ff8",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 09 - Information Dashboard\"\ndate: \"10 March 2024\"\ndate-modified: \"last-modified\"\nformat: html\nexecute: \n  echo: true # all code chunks will appear\n  eval: true # all code chunks will run live\n  warning: false # do not display warning message\n  freeze: true # do not render if no changes made\n  message: false\neditor: visual\n---\n\n\n# 1. Overview\n\nIn the ninth lesson, we learn to create bullet charts and sparklines using `ggplot2` and dashboards using Shiny.\n\n# 2. Getting Started\n\n## 2.1. Installing and Loading Packages\n\nThe following new R packages are introduced in this lesson in addition to other packages that have been previously introduced:\n\n1.  [`gtExtras`](https://jthomasmock.github.io/gtExtras/): to create beautiful tables with `gt`\n\n2.  [`reactable``](https://glin.github.io/reactable/): to create interactive data tables on R \n\n3.  [`reactablefmtr`](https://kcuilla.github.io/reactablefmtr/): to streamline and enhance styling of interactive reactable tables\n\nThe packages to be used can be installed and loaded into the R environment using the `p_load()` function from the `pacman` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, ggthemes, lubridate, ggthemes,\n               gtExtras, reactable, reactablefmtr, RODBC)\n```\n:::\n\n\n## 2.2. Import Data\n\nNext, we will use the Coffee Chain data set, which is a personal database in the Microsoft Access mdb format. We will use the RODBC package to import the database query table into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon <- odbcConnectAccess2007('data/Coffee Chain.mdb')\ncoffeechain <- sqlFetch(con, 'CoffeeChain Query')\nwrite_rds(coffeechain, \"data/CoffeeChain.rds\")\nodbcClose(con)\n```\n:::\n\n\nAfter writing the data into RDS format, we can read the file into R using `read_rds()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoffeechain <- read_rds('data/rds/CoffeeChain.rds')\nglimpse(coffeechain)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 4,248\nColumns: 19\n$ Profit           <dbl> 94, 68, 101, 30, 54, 53, 99, 0, 33, 17, 36, 111, 87, …\n$ Margin           <dbl> 130, 107, 139, 56, 80, 108, 171, 87, 80, 72, 76, 201,…\n$ Sales            <dbl> 219, 190, 234, 100, 134, 180, 341, 150, 140, 130, 140…\n$ COGS             <dbl> 89, 83, 95, 44, 54, 72, 170, 63, 60, 58, 64, 144, 95,…\n$ `Total Expenses` <dbl> 36, 39, 38, 26, 26, 55, 72, 87, 47, 55, 40, 90, 52, 1…\n$ Marketing        <dbl> 24, 27, 26, 14, 15, 23, 47, 57, 19, 22, 19, 47, 30, 7…\n$ Inventory        <dbl> 777, 623, 821, 623, 456, 558, 1091, 435, 336, 338, 96…\n$ `Budget Profit`  <dbl> 100, 80, 110, 30, 70, 80, 110, 20, 40, 20, 40, 130, 1…\n$ `Budget Margin`  <dbl> 130, 110, 140, 50, 90, 130, 160, 80, 70, 70, 70, 210,…\n$ `Budget Sales`   <dbl> 220, 190, 240, 80, 150, 210, 300, 130, 120, 110, 120,…\n$ `Budget COGS`    <dbl> 90, 80, 100, 30, 60, 80, 140, 50, 50, 40, 50, 150, 10…\n$ Date             <dttm> 2012-01-01, 2012-01-01, 2012-01-01, 2012-01-01, 2012…\n$ Market           <chr> \"Central\", \"Central\", \"Central\", \"Central\", \"Central\"…\n$ State            <chr> \"Colorado\", \"Colorado\", \"Colorado\", \"Colorado\", \"Colo…\n$ `Area Code`      <int> 719, 970, 970, 303, 303, 720, 970, 719, 970, 719, 303…\n$ `Market Size`    <chr> \"Major Market\", \"Major Market\", \"Major Market\", \"Majo…\n$ `Product Type`   <chr> \"Coffee\", \"Coffee\", \"Coffee\", \"Tea\", \"Espresso\", \"Esp…\n$ Product          <chr> \"Amaretto\", \"Colombian\", \"Decaf Irish Cream\", \"Green …\n$ Type             <chr> \"Regular\", \"Regular\", \"Decaf\", \"Regular\", \"Regular\", …\n```\n:::\n:::\n\n## 2.3. Data Preparation\n\nNext, we create another table containing Sales and Budgeted Sales data aggregated at the Product level.\n\n::: {.cell}\n\n```{.r .cell-code}\nproduct <- coffeechain %>%\n  group_by(`Product`) %>%\n  summarise(`target` = sum(`Budget Sales`),\n            `current` = sum(`Sales`)) %>%\n  ungroup()\n```\n:::\n\n\n# 3. Bullet Chart\n\nWe can use the following `ggplot2` functions to create a bullet chart:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(product,\n       aes(Product, current)) +\n  geom_col(aes(Product, max(target) * 1.01),\n           fill = \"grey90\", width = 0.85) +\n  geom_col(aes(Product, target * 0.75),\n           fill = \"grey75\", width = 0.85) +\n  geom_col(aes(Product, target * 0.5),\n           fill = \"grey50\", width = 0.85) +\n  geom_col(aes(Product, current),\n           fill = \"black\", width = 0.35) +\n  geom_errorbar(aes(y= target, x = Product,\n                    ymin = target, ymax = target),\n                width = 0.4, colour = 'red', size = 1) +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](hands_on_ex09_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n# 4. Sparklines\n\n## 4.1. Preparing the Data\n\nFirst, we create a table recording the total sales of products by month:\n\n::: {.cell}\n\n```{.r .cell-code}\nsales_report <- coffeechain %>%\n  filter(Date >= \"2013-01-01\") %>%\n  mutate(Month = month(Date)) %>%\n  group_by(Month, Product) %>%\n  summarise(Sales = sum(Sales)) %>%\n  ungroup() %>%\n  select(Month, Product, Sales)\n\nsales_report\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 156 × 3\n   Month Product           Sales\n   <dbl> <chr>             <dbl>\n 1     1 Amaretto           1210\n 2     1 Caffe Latte        1653\n 3     1 Caffe Mocha        3604\n 4     1 Chamomile          3313\n 5     1 Colombian          5439\n 6     1 Darjeeling         3178\n 7     1 Decaf Espresso     3493\n 8     1 Decaf Irish Cream  2656\n 9     1 Earl Grey          2867\n10     1 Green Tea          1399\n# ℹ 146 more rows\n```\n:::\n:::\n\n\nNext, we find the minimum, maximum, and the end-of-the-month sales:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmin <- group_by(sales_report, Product) %>%\n  slice(which.min(Sales))\n\nmax <- group_by(sales_report, Product) %>%\n  slice(which.max(Sales))\n\neom <- group_by(sales_report, Product) %>%\n  filter(Month == max(Month))\n```\n:::\n\n\nLastly, we compute the 25th and 75th quantiles:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquant <- sales_report %>%\n  group_by(Product) %>%\n  summarise(quant1 = quantile(Sales, 0.25),\n            quant2 = quantile(Sales, 0.75)) %>%\n  right_join(sales_report)\n```\n:::\n\n\n## 4.2. Creating the Plot\n\nNow, we use the following methods to create the sparklines plot using `ggplot2` methods:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sales_report, \n       aes(x=Month, y=Sales)) + \n  facet_grid(Product ~ ., \n             scales = \"free_y\") + \n  geom_ribbon(data = quant, \n              aes(ymin = quant1, max = quant2), \n              fill = 'grey90') +\n  geom_line(size = 0.3) +\n  geom_point(data = min, \n             col = 'red') +\n  geom_point(data = max, \n             col = 'blue') +\n  geom_text(data = min, \n            aes(label = Sales), \n            vjust = -1) +\n  geom_text(data = max, \n            aes(label = Sales), \n            vjust = 2.5) +\n  geom_text(data = eom, \n            aes(label = Sales), \n            hjust = 0, nudge_x = 0.5) +\n  geom_text(data = eom, \n            aes(label = Product), \n            hjust = 0, nudge_x = 1.0) +\n  expand_limits(x = max(sales_report$Month) + \n                  (0.25 * (max(sales_report$Month) - \n                             min(sales_report$Month)))) +\n  scale_x_continuous(breaks = seq(1, 12, 1)) +\n  scale_y_continuous(expand = c(0.1, 0)) +\n  theme_tufte(base_size = 3, base_family = \"Helvetica\") +\n  theme(axis.title = element_blank(), \n        axis.text.y = element_blank(), \n        axis.ticks = element_blank(), \n        strip.text = element_blank())\n```\n\n::: {.cell-output-display}\n![](hands_on_ex09_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "hands_on_ex09_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}